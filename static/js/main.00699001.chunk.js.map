{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","className","key","id","content","class","type","onClick","AddTodo","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","onChange","Component","App","filter","Math","random","concat","Object","toConsumableArray","console","log","src_Todos","src_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOA+CeA,EA7CD,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,WAEdC,EAAWF,EAAMG,OACnBH,EAAMI,IAAI,SAAAC,GACN,OAGIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,IAAKL,EAAKM,IAIpCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAGHH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVJ,EAAKO,SAIlBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,SAAOK,MAAM,kBACTP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWC,QAAS,WAAQd,EAAWI,EAAKM,OACxDL,EAAAC,EAAAC,cAAA,QAAMK,MAAM,0BAcnCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,iCAEL,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVP,ICPEc,6MAhCXC,MAAQ,CACJL,QAAS,MAGbM,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVT,QAASO,EAAEG,OAAOC,WAI1BC,aAAe,SAACL,GACZA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CACVT,QAAS,8EAKb,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,QAAMoB,SAAUC,KAAKL,cACjBlB,EAAAC,EAAAC,cAAA,qCAGAF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOgB,SAAUD,KAAKX,aAAcK,MAAOM,KAAKZ,MAAML,mBA1BhEmB,aC6CPC,6MA1CXf,MAAQ,CACJjB,MAAO,MAKXC,WAAa,SAACU,GACV,IAAMX,EAAQoB,EAAKH,MAAMjB,MAAMiC,OAAO,SAAC5B,GACnC,OAAOA,EAAKM,KAAOA,IAEvBS,EAAKC,SAAS,CACVrB,MAAOA,OAIf2B,QAAU,SAACtB,GACPA,EAAKM,GAAKuB,KAAKC,SACf,IAAInC,EAAK,GAAAoC,OAAAC,OAAAC,EAAA,EAAAD,CAAOjB,EAAKH,MAAMjB,OAAlB,CAAyBK,IAClCkC,QAAQC,IAAInC,EAAKM,IACjBS,EAAKC,SAAS,CACVrB,MAAOA,6EAMX,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACTH,EAAAC,EAAAC,cAAA,oBACNF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEXH,EAAAC,EAAAC,cAACiC,EAAD,CAAOzC,MAAO6B,KAAKZ,MAAMjB,MAAOC,WAAY4B,KAAK5B,eAIrDK,EAAAC,EAAAC,cAACkC,EAAD,CAASf,QAASE,KAAKF,kBArCrBI,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.00699001.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n\r\n    const todoList = todos.length ? (\r\n        todos.map(todo => {\r\n            return (\r\n               \r\n                    \r\n                <div className=\"list-element\" key={todo.id}>\r\n\r\n              \r\n\r\n                    <div className=\"row\">\r\n                       \r\n\r\n                                <div className=\"col span-3-of-4\">\r\n                                    {todo.content}\r\n                                </div>\r\n\r\n\r\n                        <div className=\"col span-1-of-4\">\r\n                            <label class=\"checkbox-label\">\r\n                                <input type=\"checkbox\" onClick={() => { deleteTodo(todo.id) }} />\r\n                                <span class=\"checkbox-custom\"></span>\r\n                                </label>\r\n                                    </div>\r\n\r\n                                   \r\n                     </div>\r\n\r\n               \r\n\r\n                            </div>\r\n              \r\n                \r\n                )\r\n        })\r\n    ) : (<div className=\"list-element-start\">What do you want to do today?</div>);\r\n\r\n    return (\r\n        <div className=\"todos\">\r\n            {todoList}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react'\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            content: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Add new thing to do:\r\n                    </label>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content} />\r\n                </form>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\r\nimport Todos from './Todos'\r\nimport AddTodo from './AddTodo';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        todos: [\r\n            \r\n        ]\r\n    }\r\n\r\n    deleteTodo = (id) => {\r\n        const todos = this.state.todos.filter((todo) => {\r\n            return todo.id !== id;\r\n        });\r\n        this.setState({\r\n            todos: todos\r\n        })\r\n    }\r\n\r\n    addTodo = (todo) => {\r\n        todo.id = Math.random();\r\n        let todos = [...this.state.todos, todo];\r\n        console.log(todo.id);\r\n        this.setState({\r\n            todos: todos\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"whole-app-container\">\r\n                <div className=\"app-container\">\r\n                      <h1>To do:</h1>\r\n                <div className=\"list-box\">\r\n                  \r\n                    <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\r\n                    \r\n                </div>\r\n                </div>\r\n                <AddTodo addTodo={this.addTodo} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './grid.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}